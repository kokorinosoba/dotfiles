#!/usr/bin/env bash

set -eu

source "$(dirname $0)/../etc/library/library.sh"
readonly DOTFILES_DIR="$(__get_dotfiles_directory)"
cd "$DOTFILES_DIR"

usage() {
  echo "Usage: ${0##*/} [<option>]"                                                     1>&2
  echo "Options:"                                                                       1>&2
  echo '    -d         delete symlinks at $HOME dotfiles which exist in "dotfiles" dir' 1>&2
  echo '    -f         make symlinks at $HOME by force'                                 1>&2
  echo '    -i         make symlinks at $HOME interactively'                            1>&2
  echo ""                                                                               1>&2
  exit 1
}

mklink() {
  local dotfile=$1
  if [[ -e $HOME/$dotfile ]]; then
    echo "Failed to create symlink to \$HOME/$dotfile"
  else
    ln -s $DOTFILES_DIR/$dotfile $HOME &&
    echo "Created symlink to \$HOME/$dotfile"
  fi
}

oplink() {
  local opt=$1
  local dotfile=$2
  ln -s $opt $DOTFILES_DIR/$dotfile $HOME &&
  [[ $opt == "-f" ]] && echo "Created symlink to \$HOME/$dotfile"
}

rmlink() {
  local dotfile=$1
  if [[ -L $HOME/$dotfile ]]; then
    unlink $HOME/$dotfile &&
    echo "Deleted symlink \$HOME/$dotfile"
  fi
}

cmd="mklink"
while getopts fdih opt &> /dev/null
do
  case $opt in
    d ) cmd="rmlink" ;;
    f ) cmd="oplink -f" ;;
    i ) cmd="oplink -i" ;;
    h ) usage ;;
    \? ) usage ;;
  esac
done

shift $((OPTIND - 1))

for dotfile in .??*
do
  [[ $dotfile == .git ]]        && continue
  [[ $dotfile == .gitignore ]]  && continue
  [[ $dotfile == .gitmodules ]] && continue
  [[ $dotfile == .DS_Store ]]   && continue

  $cmd $dotfile
done

exit 0
